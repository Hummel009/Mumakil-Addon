package com.github.hummel.mumakil.content;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

@SideOnly(Side.CLIENT)
public class MumakilModel extends ModelBase {
	private final ModelRenderer head;
	private final ModelRenderer neck;
	private final ModelRenderer headBump;
	private final ModelRenderer chin;
	private final ModelRenderer lowerLip;
	private final ModelRenderer back;
	private final ModelRenderer leftSmallEar;
	private final ModelRenderer leftBigEar;
	private final ModelRenderer rightSmallEar;
	private final ModelRenderer rightBigEar;
	private final ModelRenderer hump;
	private final ModelRenderer body;
	private final ModelRenderer skirt;
	private final ModelRenderer rightTuskA;
	private final ModelRenderer rightTuskB;
	private final ModelRenderer rightTuskC;
	private final ModelRenderer rightTuskD;
	private final ModelRenderer leftTuskA;
	private final ModelRenderer leftTuskB;
	private final ModelRenderer leftTuskC;
	private final ModelRenderer leftTuskD;
	private final ModelRenderer trunkA;
	private final ModelRenderer trunkB;
	private final ModelRenderer trunkC;
	private final ModelRenderer trunkD;
	private final ModelRenderer trunkE;
	private final ModelRenderer frontRightUpperLeg;
	private final ModelRenderer frontRightLowerLeg;
	private final ModelRenderer frontLeftUpperLeg;
	private final ModelRenderer frontLeftLowerLeg;
	private final ModelRenderer backRightUpperLeg;
	private final ModelRenderer backRightLowerLeg;
	private final ModelRenderer backLeftUpperLeg;
	private final ModelRenderer backLeftLowerLeg;
	private final ModelRenderer tailRoot;
	private final ModelRenderer tail;
	private final ModelRenderer tailPlush;
	private final ModelRenderer storageRightBedroll;
	private final ModelRenderer storageLeftBedroll;
	private final ModelRenderer storageFrontRightChest;
	private final ModelRenderer storageBackRightChest;
	private final ModelRenderer storageFrontLeftChest;
	private final ModelRenderer storageBackLeftChest;
	private final ModelRenderer storageRightBlankets;
	private final ModelRenderer storageLeftBlankets;
	private final ModelRenderer harnessBlanket;
	private final ModelRenderer harnessUpperBelt;
	private final ModelRenderer harnessLowerBelt;
	private final ModelRenderer cabinPillow;
	private final ModelRenderer cabinLeftRail;
	private final ModelRenderer cabin;
	private final ModelRenderer cabinRightRail;
	private final ModelRenderer cabinBackRail;
	private final ModelRenderer cabinRoof;
	private final ModelRenderer fortNeckBeam;
	private final ModelRenderer fortBackBeam;
	private final ModelRenderer tuskLD1;
	private final ModelRenderer tuskLD2;
	private final ModelRenderer tuskLD3;
	private final ModelRenderer tuskLD4;
	private final ModelRenderer tuskLD5;
	private final ModelRenderer tuskRD1;
	private final ModelRenderer tuskRD2;
	private final ModelRenderer tuskRD3;
	private final ModelRenderer tuskRD4;
	private final ModelRenderer tuskRD5;
	private final ModelRenderer tuskLI1;
	private final ModelRenderer tuskLI2;
	private final ModelRenderer tuskLI3;
	private final ModelRenderer tuskLI4;
	private final ModelRenderer tuskLI5;
	private final ModelRenderer tuskRI1;
	private final ModelRenderer tuskRI2;
	private final ModelRenderer tuskRI3;
	private final ModelRenderer tuskRI4;
	private final ModelRenderer tuskRI5;
	private final ModelRenderer tuskLW1;
	private final ModelRenderer tuskLW2;
	private final ModelRenderer tuskLW3;
	private final ModelRenderer tuskLW4;
	private final ModelRenderer tuskLW5;
	private final ModelRenderer tuskRW1;
	private final ModelRenderer tuskRW2;
	private final ModelRenderer tuskRW3;
	private final ModelRenderer tuskRW4;
	private final ModelRenderer tuskRW5;
	private final ModelRenderer fortFloor1;
	private final ModelRenderer fortFloor2;
	private final ModelRenderer fortFloor3;
	private final ModelRenderer fortBackWall;
	private final ModelRenderer fortBackLeftWall;
	private final ModelRenderer fortBackRightWall;
	private final ModelRenderer storageUpLeft;
	private final ModelRenderer storageUpRight;

	public MumakilModel() {
		textureWidth = 128;
		textureHeight = 256;
		head = new ModelRenderer(this, 60, 0);
		head.addBox(-5.5f, -6.0f, -8.0f, 11, 15, 10);
		head.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(head, -0.1745329f, 0.0f, 0.0f);
		neck = new ModelRenderer(this, 46, 48);
		neck.addBox(-4.95f, -6.0f, -8.0f, 10, 14, 8);
		neck.setRotationPoint(0.0f, -8.0f, -10.0f);
		setRotation(neck, -0.2617994f, 0.0f, 0.0f);
		headBump = new ModelRenderer(this, 104, 41);
		headBump.addBox(-3.0f, -9.0f, -6.0f, 6, 3, 6);
		headBump.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(headBump, -0.1745329f, 0.0f, 0.0f);
		chin = new ModelRenderer(this, 86, 56);
		chin.addBox(-1.5f, -6.0f, -10.7f, 3, 5, 4);
		chin.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(chin, 2.054118f, 0.0f, 0.0f);
		lowerLip = new ModelRenderer(this, 80, 65);
		lowerLip.addBox(-2.0f, -2.0f, -14.0f, 4, 2, 6);
		lowerLip.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(lowerLip, 1.570796f, 0.0f, 0.0f);
		back = new ModelRenderer(this, 0, 48);
		back.addBox(-5.0f, -10.0f, -10.0f, 10, 2, 26);
		back.setRotationPoint(0.0f, -4.0f, -3.0f);
		leftSmallEar = new ModelRenderer(this, 102, 0);
		leftSmallEar.addBox(2.0f, -8.0f, -5.0f, 8, 10, 1);
		leftSmallEar.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(leftSmallEar, -0.1745329f, -0.5235988f, 0.5235988f);
		leftBigEar = new ModelRenderer(this, 102, 0);
		leftBigEar.addBox(2.0f, -8.0f, -5.0f, 12, 14, 1);
		leftBigEar.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(leftBigEar, -0.1745329f, -0.5235988f, 0.5235988f);
		rightSmallEar = new ModelRenderer(this, 106, 15);
		rightSmallEar.addBox(-10.0f, -8.0f, -5.0f, 8, 10, 1);
		rightSmallEar.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(rightSmallEar, -0.1745329f, 0.5235988f, -0.5235988f);
		rightBigEar = new ModelRenderer(this, 102, 15);
		rightBigEar.addBox(-14.0f, -8.0f, -5.0f, 12, 14, 1);
		rightBigEar.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(rightBigEar, -0.1745329f, 0.5235988f, -0.5235988f);
		hump = new ModelRenderer(this, 88, 30);
		hump.addBox(-6.0f, -2.0f, -3.0f, 12, 3, 8);
		hump.setRotationPoint(0.0f, -13.0f, -5.5f);
		body = new ModelRenderer(this, 0, 0);
		body.addBox(-8.0f, -10.0f, -10.0f, 16, 20, 28);
		body.setRotationPoint(0.0f, -2.0f, -3.0f);
		skirt = new ModelRenderer(this, 28, 94);
		skirt.addBox(-8.0f, -10.0f, -6.0f, 16, 28, 6);
		skirt.setRotationPoint(0.0f, 8.0f, -3.0f);
		setRotation(skirt, 1.570796f, 0.0f, 0.0f);
		rightTuskA = new ModelRenderer(this, 2, 60);
		rightTuskA.addBox(-3.8f, -3.5f, -19.0f, 2, 2, 10);
		rightTuskA.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(rightTuskA, 1.22173f, 0.0f, 0.1745329f);
		rightTuskB = new ModelRenderer(this, 0, 0);
		rightTuskB.addBox(-3.8f, 6.2f, -24.2f, 2, 2, 7);
		rightTuskB.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(rightTuskB, 0.6981317f, 0.0f, 0.1745329f);
		rightTuskC = new ModelRenderer(this, 0, 18);
		rightTuskC.addBox(-3.8f, 17.1f, -21.9f, 2, 2, 5);
		rightTuskC.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(rightTuskC, 0.1745329f, 0.0f, 0.1745329f);
		rightTuskD = new ModelRenderer(this, 14, 18);
		rightTuskD.addBox(-3.8f, 25.5f, -14.5f, 2, 2, 5);
		rightTuskD.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(rightTuskD, -0.3490659f, 0.0f, 0.1745329f);
		leftTuskA = new ModelRenderer(this, 2, 48);
		leftTuskA.addBox(1.8f, -3.5f, -19.0f, 2, 2, 10);
		leftTuskA.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(leftTuskA, 1.22173f, 0.0f, -0.1745329f);
		leftTuskB = new ModelRenderer(this, 0, 9);
		leftTuskB.addBox(1.8f, 6.2f, -24.2f, 2, 2, 7);
		leftTuskB.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(leftTuskB, 0.6981317f, 0.0f, -0.1745329f);
		leftTuskC = new ModelRenderer(this, 0, 18);
		leftTuskC.addBox(1.8f, 17.1f, -21.9f, 2, 2, 5);
		leftTuskC.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(leftTuskC, 0.1745329f, 0.0f, -0.1745329f);
		leftTuskD = new ModelRenderer(this, 14, 18);
		leftTuskD.addBox(1.8f, 25.5f, -14.5f, 2, 2, 5);
		leftTuskD.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(leftTuskD, -0.3490659f, 0.0f, -0.1745329f);
		trunkA = new ModelRenderer(this, 0, 76);
		trunkA.addBox(-4.0f, -2.5f, -18.0f, 8, 7, 10);
		trunkA.setRotationPoint(0.0f, -3.0f, -22.46667f);
		setRotation(trunkA, 1.570796f, 0.0f, 0.0f);
		trunkB = new ModelRenderer(this, 0, 93);
		trunkB.addBox(-3.0f, -2.5f, -7.0f, 6, 5, 7);
		trunkB.setRotationPoint(0.0f, 6.5f, -22.5f);
		setRotation(trunkB, 1.658063f, 0.0f, 0.0f);
		trunkC = new ModelRenderer(this, 0, 105);
		trunkC.addBox(-2.5f, -2.0f, -4.0f, 5, 4, 5);
		trunkC.setRotationPoint(0.0f, 13.0f, -22.0f);
		setRotation(trunkC, 1.919862f, 0.0f, 0.0f);
		trunkD = new ModelRenderer(this, 0, 114);
		trunkD.addBox(-2.0f, -1.5f, -5.0f, 4, 3, 5);
		trunkD.setRotationPoint(0.0f, 16.0f, -21.5f);
		setRotation(trunkD, 2.216568f, 0.0f, 0.0f);
		trunkE = new ModelRenderer(this, 0, 122);
		trunkE.addBox(-1.5f, -1.0f, -4.0f, 3, 2, 4);
		trunkE.setRotationPoint(0.0f, 19.5f, -19.0f);
		setRotation(trunkE, 2.530727f, 0.0f, 0.0f);
		frontRightUpperLeg = new ModelRenderer(this, 100, 109);
		frontRightUpperLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 12, 7);
		frontRightUpperLeg.setRotationPoint(-4.6f, 4.0f, -9.6f);
		frontRightLowerLeg = new ModelRenderer(this, 100, 73);
		frontRightLowerLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 10, 7);
		frontRightLowerLeg.setRotationPoint(-4.6f, 14.0f, -9.6f);
		frontLeftUpperLeg = new ModelRenderer(this, 100, 90);
		frontLeftUpperLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 12, 7);
		frontLeftUpperLeg.setRotationPoint(4.6f, 4.0f, -9.6f);
		frontLeftLowerLeg = new ModelRenderer(this, 72, 73);
		frontLeftLowerLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 10, 7);
		frontLeftLowerLeg.setRotationPoint(4.6f, 14.0f, -9.6f);
		backRightUpperLeg = new ModelRenderer(this, 72, 109);
		backRightUpperLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 12, 7);
		backRightUpperLeg.setRotationPoint(-4.6f, 4.0f, 11.6f);
		backRightLowerLeg = new ModelRenderer(this, 100, 56);
		backRightLowerLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 10, 7);
		backRightLowerLeg.setRotationPoint(-4.6f, 14.0f, 11.6f);
		backLeftUpperLeg = new ModelRenderer(this, 72, 90);
		backLeftUpperLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 12, 7);
		backLeftUpperLeg.setRotationPoint(4.6f, 4.0f, 11.6f);
		backLeftLowerLeg = new ModelRenderer(this, 44, 77);
		backLeftLowerLeg.addBox(-3.5f, 0.0f, -3.5f, 7, 10, 7);
		backLeftLowerLeg.setRotationPoint(4.6f, 14.0f, 11.6f);
		tailRoot = new ModelRenderer(this, 20, 105);
		tailRoot.addBox(-1.0f, 0.0f, -2.0f, 2, 10, 2);
		tailRoot.setRotationPoint(0.0f, -8.0f, 15.0f);
		setRotation(tailRoot, 0.296706f, 0.0f, 0.0f);
		tail = new ModelRenderer(this, 20, 117);
		tail.addBox(-1.0f, 9.7f, -0.2f, 2, 6, 2);
		tail.setRotationPoint(0.0f, -8.0f, 15.0f);
		setRotation(tail, 0.1134464f, 0.0f, 0.0f);
		tailPlush = new ModelRenderer(this, 26, 76);
		tailPlush.addBox(-1.5f, 15.5f, -0.7f, 3, 6, 3);
		tailPlush.setRotationPoint(0.0f, -8.0f, 15.0f);
		setRotation(tailPlush, 0.1134464f, 0.0f, 0.0f);
		storageRightBedroll = new ModelRenderer(this, 90, 231);
		storageRightBedroll.addBox(-2.5f, 8.0f, -8.0f, 3, 3, 16);
		storageRightBedroll.setRotationPoint(-9.0f, -10.2f, 1.0f);
		setRotation(storageRightBedroll, 0.0f, 0.0f, 0.418879f);
		storageLeftBedroll = new ModelRenderer(this, 90, 231);
		storageLeftBedroll.addBox(-0.5f, 8.0f, -8.0f, 3, 3, 16);
		storageLeftBedroll.setRotationPoint(9.0f, -10.2f, 1.0f);
		setRotation(storageLeftBedroll, 0.0f, 0.0f, -0.418879f);
		storageFrontRightChest = new ModelRenderer(this, 76, 208);
		storageFrontRightChest.addBox(-3.5f, 0.0f, -5.0f, 5, 8, 10);
		storageFrontRightChest.setRotationPoint(-11.0f, -1.2f, -4.5f);
		setRotation(storageFrontRightChest, 0.0f, 0.0f, -0.2617994f);
		storageBackRightChest = new ModelRenderer(this, 76, 208);
		storageBackRightChest.addBox(-3.5f, 0.0f, -5.0f, 5, 8, 10);
		storageBackRightChest.setRotationPoint(-11.0f, -1.2f, 6.5f);
		setRotation(storageBackRightChest, 0.0f, 0.0f, -0.2617994f);
		storageFrontLeftChest = new ModelRenderer(this, 76, 226);
		storageFrontLeftChest.addBox(-1.5f, 0.0f, -5.0f, 5, 8, 10);
		storageFrontLeftChest.setRotationPoint(11.0f, -1.2f, -4.5f);
		setRotation(storageFrontLeftChest, 0.0f, 0.0f, 0.2617994f);
		storageBackLeftChest = new ModelRenderer(this, 76, 226);
		storageBackLeftChest.addBox(-1.5f, 0.0f, -5.0f, 5, 8, 10);
		storageBackLeftChest.setRotationPoint(11.0f, -1.2f, 6.5f);
		setRotation(storageBackLeftChest, 0.0f, 0.0f, 0.2617994f);
		storageRightBlankets = new ModelRenderer(this, 0, 228);
		storageRightBlankets.addBox(-4.5f, -1.0f, -7.0f, 5, 10, 14);
		storageRightBlankets.setRotationPoint(-9.0f, -10.2f, 1.0f);
		storageLeftBlankets = new ModelRenderer(this, 38, 228);
		storageLeftBlankets.addBox(-0.5f, -1.0f, -7.0f, 5, 10, 14);
		storageLeftBlankets.setRotationPoint(9.0f, -10.2f, 1.0f);
		harnessBlanket = new ModelRenderer(this, 0, 196);
		harnessBlanket.addBox(-8.5f, -2.0f, -3.0f, 17, 14, 18);
		harnessBlanket.setRotationPoint(0.0f, -13.2f, -3.5f);
		harnessUpperBelt = new ModelRenderer(this, 70, 196);
		harnessUpperBelt.addBox(-8.5f, 0.5f, -2.0f, 17, 10, 2);
		harnessUpperBelt.setRotationPoint(0.0f, -2.0f, -2.5f);
		harnessLowerBelt = new ModelRenderer(this, 70, 196);
		harnessLowerBelt.addBox(-8.5f, 0.5f, -2.5f, 17, 10, 2);
		harnessLowerBelt.setRotationPoint(0.0f, -2.0f, 7.0f);
		cabinPillow = new ModelRenderer(this, 76, 146);
		cabinPillow.addBox(-6.5f, 0.0f, -6.5f, 13, 4, 13);
		cabinPillow.setRotationPoint(0.0f, -16.0f, 2.0f);
		cabinLeftRail = new ModelRenderer(this, 56, 147);
		cabinLeftRail.addBox(-7.0f, 0.0f, 7.0f, 14, 1, 1);
		cabinLeftRail.setRotationPoint(0.0f, -23.0f, 1.5f);
		setRotation(cabinLeftRail, 0.0f, 1.570796f, 0.0f);
		cabin = new ModelRenderer(this, 0, 128);
		cabin.addBox(-7.0f, 0.0f, -7.0f, 14, 20, 14);
		cabin.setRotationPoint(0.0f, -35.0f, 2.0f);
		cabinRightRail = new ModelRenderer(this, 56, 147);
		cabinRightRail.addBox(-7.0f, 0.0f, 7.0f, 14, 1, 1);
		cabinRightRail.setRotationPoint(0.0f, -23.0f, 1.5f);
		setRotation(cabinRightRail, 0.0f, -1.570796f, 0.0f);
		cabinBackRail = new ModelRenderer(this, 56, 147);
		cabinBackRail.addBox(-7.0f, 0.0f, 7.0f, 14, 1, 1);
		cabinBackRail.setRotationPoint(0.0f, -23.0f, 1.5f);
		cabinRoof = new ModelRenderer(this, 56, 128);
		cabinRoof.addBox(-7.5f, 0.0f, -7.5f, 15, 4, 15);
		cabinRoof.setRotationPoint(0.0f, -34.0f, 2.0f);
		fortNeckBeam = new ModelRenderer(this, 26, 180);
		fortNeckBeam.addBox(-12.0f, 0.0f, -20.5f, 24, 4, 4);
		fortNeckBeam.setRotationPoint(0.0f, -16.0f, 10.0f);
		fortBackBeam = new ModelRenderer(this, 26, 180);
		fortBackBeam.addBox(-12.0f, 0.0f, 0.0f, 24, 4, 4);
		fortBackBeam.setRotationPoint(0.0f, -16.0f, 10.0f);
		tuskLD1 = new ModelRenderer(this, 108, 207);
		tuskLD1.addBox(1.3f, 5.5f, -24.2f, 3, 3, 7);
		tuskLD1.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLD1, 0.6981317f, 0.0f, -0.1745329f);
		tuskLD2 = new ModelRenderer(this, 112, 199);
		tuskLD2.addBox(1.29f, 16.5f, -21.9f, 3, 3, 5);
		tuskLD2.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLD2, 0.1745329f, 0.0f, -0.1745329f);
		tuskLD3 = new ModelRenderer(this, 110, 190);
		tuskLD3.addBox(1.3f, 24.9f, -15.5f, 3, 3, 6);
		tuskLD3.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLD3, -0.3490659f, 0.0f, -0.1745329f);
		tuskLD4 = new ModelRenderer(this, 86, 175);
		tuskLD4.addBox(2.7f, 14.5f, -21.9f, 0, 7, 5);
		tuskLD4.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLD4, 0.1745329f, 0.0f, -0.1745329f);
		tuskLD5 = new ModelRenderer(this, 112, 225);
		tuskLD5.addBox(2.7f, 22.9f, -17.5f, 0, 7, 8);
		tuskLD5.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLD5, -0.3490659f, 0.0f, -0.1745329f);
		tuskRD1 = new ModelRenderer(this, 108, 207);
		tuskRD1.addBox(-4.3f, 5.5f, -24.2f, 3, 3, 7);
		tuskRD1.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRD1, 0.6981317f, 0.0f, 0.1745329f);
		tuskRD2 = new ModelRenderer(this, 112, 199);
		tuskRD2.addBox(-4.29f, 16.5f, -21.9f, 3, 3, 5);
		tuskRD2.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRD2, 0.1745329f, 0.0f, 0.1745329f);
		tuskRD3 = new ModelRenderer(this, 110, 190);
		tuskRD3.addBox(-4.3f, 24.9f, -15.5f, 3, 3, 6);
		tuskRD3.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRD3, -0.3490659f, 0.0f, 0.1745329f);
		tuskRD4 = new ModelRenderer(this, 86, 163);
		tuskRD4.addBox(-2.8f, 14.5f, -21.9f, 0, 7, 5);
		tuskRD4.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRD4, 0.1745329f, 0.0f, 0.1745329f);
		tuskRD5 = new ModelRenderer(this, 112, 232);
		tuskRD5.addBox(-2.8f, 22.9f, -17.5f, 0, 7, 8);
		tuskRD5.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRD5, -0.3490659f, 0.0f, 0.1745329f);
		tuskLI1 = new ModelRenderer(this, 108, 180);
		tuskLI1.addBox(1.3f, 5.5f, -24.2f, 3, 3, 7);
		tuskLI1.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLI1, 0.6981317f, 0.0f, -0.1745329f);
		tuskLI2 = new ModelRenderer(this, 112, 172);
		tuskLI2.addBox(1.29f, 16.5f, -21.9f, 3, 3, 5);
		tuskLI2.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLI2, 0.1745329f, 0.0f, -0.1745329f);
		tuskLI3 = new ModelRenderer(this, 110, 163);
		tuskLI3.addBox(1.3f, 24.9f, -15.5f, 3, 3, 6);
		tuskLI3.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLI3, -0.3490659f, 0.0f, -0.1745329f);
		tuskLI4 = new ModelRenderer(this, 96, 175);
		tuskLI4.addBox(2.7f, 14.5f, -21.9f, 0, 7, 5);
		tuskLI4.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLI4, 0.1745329f, 0.0f, -0.1745329f);
		tuskLI5 = new ModelRenderer(this, 112, 209);
		tuskLI5.addBox(2.7f, 22.9f, -17.5f, 0, 7, 8);
		tuskLI5.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLI5, -0.3490659f, 0.0f, -0.1745329f);
		tuskRI1 = new ModelRenderer(this, 108, 180);
		tuskRI1.addBox(-4.3f, 5.5f, -24.2f, 3, 3, 7);
		tuskRI1.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRI1, 0.6981317f, 0.0f, 0.1745329f);
		tuskRI2 = new ModelRenderer(this, 112, 172);
		tuskRI2.addBox(-4.29f, 16.5f, -21.9f, 3, 3, 5);
		tuskRI2.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRI2, 0.1745329f, 0.0f, 0.1745329f);
		tuskRI3 = new ModelRenderer(this, 110, 163);
		tuskRI3.addBox(-4.3f, 24.9f, -15.5f, 3, 3, 6);
		tuskRI3.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRI3, -0.3490659f, 0.0f, 0.1745329f);
		tuskRI4 = new ModelRenderer(this, 96, 163);
		tuskRI4.addBox(-2.8f, 14.5f, -21.9f, 0, 7, 5);
		tuskRI4.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRI4, 0.1745329f, 0.0f, 0.1745329f);
		tuskRI5 = new ModelRenderer(this, 112, 216);
		tuskRI5.addBox(-2.8f, 22.9f, -17.5f, 0, 7, 8);
		tuskRI5.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRI5, -0.3490659f, 0.0f, 0.1745329f);
		tuskLW1 = new ModelRenderer(this, 56, 166);
		tuskLW1.addBox(1.3f, 5.5f, -24.2f, 3, 3, 7);
		tuskLW1.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLW1, 0.6981317f, 0.0f, -0.1745329f);
		tuskLW2 = new ModelRenderer(this, 60, 158);
		tuskLW2.addBox(1.29f, 16.5f, -21.9f, 3, 3, 5);
		tuskLW2.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLW2, 0.1745329f, 0.0f, -0.1745329f);
		tuskLW3 = new ModelRenderer(this, 58, 149);
		tuskLW3.addBox(1.3f, 24.9f, -15.5f, 3, 3, 6);
		tuskLW3.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLW3, -0.3490659f, 0.0f, -0.1745329f);
		tuskLW4 = new ModelRenderer(this, 46, 164);
		tuskLW4.addBox(2.7f, 14.5f, -21.9f, 0, 7, 5);
		tuskLW4.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLW4, 0.1745329f, 0.0f, -0.1745329f);
		tuskLW5 = new ModelRenderer(this, 52, 192);
		tuskLW5.addBox(2.7f, 22.9f, -17.5f, 0, 7, 8);
		tuskLW5.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskLW5, -0.3490659f, 0.0f, -0.1745329f);
		tuskRW1 = new ModelRenderer(this, 56, 166);
		tuskRW1.addBox(-4.3f, 5.5f, -24.2f, 3, 3, 7);
		tuskRW1.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRW1, 0.6981317f, 0.0f, 0.1745329f);
		tuskRW2 = new ModelRenderer(this, 60, 158);
		tuskRW2.addBox(-4.29f, 16.5f, -21.9f, 3, 3, 5);
		tuskRW2.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRW2, 0.1745329f, 0.0f, 0.1745329f);
		tuskRW3 = new ModelRenderer(this, 58, 149);
		tuskRW3.addBox(-4.3f, 24.9f, -15.5f, 3, 3, 6);
		tuskRW3.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRW3, -0.3490659f, 0.0f, 0.1745329f);
		tuskRW4 = new ModelRenderer(this, 46, 157);
		tuskRW4.addBox(-2.8f, 14.5f, -21.9f, 0, 7, 5);
		tuskRW4.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRW4, 0.1745329f, 0.0f, 0.1745329f);
		tuskRW5 = new ModelRenderer(this, 52, 199);
		tuskRW5.addBox(-2.8f, 22.9f, -17.5f, 0, 7, 8);
		tuskRW5.setRotationPoint(0.0f, -10.0f, -16.5f);
		setRotation(tuskRW5, -0.3490659f, 0.0f, 0.1745329f);
		fortFloor1 = new ModelRenderer(this, 0, 176);
		fortFloor1.addBox(-0.5f, -20.0f, -6.0f, 1, 8, 12);
		fortFloor1.setRotationPoint(0.0f, -16.0f, 10.0f);
		setRotation(fortFloor1, 1.570796f, 0.0f, 1.570796f);
		fortFloor2 = new ModelRenderer(this, 0, 176);
		fortFloor2.addBox(-0.5f, -12.0f, -6.0f, 1, 8, 12);
		fortFloor2.setRotationPoint(0.0f, -16.0f, 10.0f);
		setRotation(fortFloor2, 1.570796f, 0.0f, 1.570796f);
		fortFloor3 = new ModelRenderer(this, 0, 176);
		fortFloor3.addBox(-0.5f, -4.0f, -6.0f, 1, 8, 12);
		fortFloor3.setRotationPoint(0.0f, -16.0f, 10.0f);
		setRotation(fortFloor3, 1.570796f, 0.0f, 1.570796f);
		fortBackWall = new ModelRenderer(this, 0, 176);
		fortBackWall.addBox(-5.0f, -6.2f, -6.0f, 1, 8, 12);
		fortBackWall.setRotationPoint(0.0f, -16.0f, 10.0f);
		setRotation(fortBackWall, 0.0f, 1.570796f, 0.0f);
		fortBackLeftWall = new ModelRenderer(this, 0, 176);
		fortBackLeftWall.addBox(6.0f, -6.0f, -7.0f, 1, 8, 12);
		fortBackLeftWall.setRotationPoint(0.0f, -16.0f, 10.0f);
		fortBackRightWall = new ModelRenderer(this, 0, 176);
		fortBackRightWall.addBox(-7.0f, -6.0f, -7.0f, 1, 8, 12);
		fortBackRightWall.setRotationPoint(0.0f, -16.0f, 10.0f);
		storageUpLeft = new ModelRenderer(this, 76, 226);
		storageUpLeft.addBox(6.5f, 1.0f, -14.0f, 5, 8, 10);
		storageUpLeft.setRotationPoint(0.0f, -16.0f, 10.0f);
		setRotation(storageUpLeft, 0.0f, 0.0f, -0.3839724f);
		storageUpRight = new ModelRenderer(this, 76, 208);
		storageUpRight.addBox(-11.5f, 1.0f, -14.0f, 5, 8, 10);
		storageUpRight.setRotationPoint(0.0f, -16.0f, 10.0f);
		setRotation(storageUpRight, 0.0f, 0.0f, 0.3839724f);
	}

	private void adjustAllRotationPoints(ModelRenderer target, ModelRenderer origin) {
		float distanceY = target.rotationPointY > origin.rotationPointY ? target.rotationPointY - origin.rotationPointY : origin.rotationPointY - target.rotationPointY;
		target.rotationPointY = origin.rotationPointY + MathHelper.sin(origin.rotateAngleX) * distanceY;
		target.rotationPointZ = origin.rotationPointZ - MathHelper.cos(origin.rotateAngleY) * (MathHelper.cos(origin.rotateAngleX) * distanceY);
		target.rotationPointX = origin.rotationPointX - MathHelper.sin(origin.rotateAngleY) * (MathHelper.cos(origin.rotateAngleX) * distanceY);
	}

	private void adjustXRotationPoints(ModelRenderer target, ModelRenderer origin) {
		float distance = target.rotationPointY - origin.rotationPointY;
		if (distance < 0.0f) {
			distance *= -1.0f;
		}
		target.rotationPointZ = origin.rotationPointZ + MathHelper.sin(origin.rotateAngleX) * distance;
		target.rotationPointY = origin.rotationPointY + MathHelper.cos(origin.rotateAngleX) * distance;
	}

	private void adjustY(float f) {
		head.rotationPointY = f - 10.0f;
		neck.rotationPointY = f - 8.0f;
		headBump.rotationPointY = f - 10.0f;
		chin.rotationPointY = f - 10.0f;
		lowerLip.rotationPointY = f - 10.0f;
		back.rotationPointY = f - 4.0f;
		leftSmallEar.rotationPointY = f - 10.0f;
		leftBigEar.rotationPointY = f - 10.0f;
		rightSmallEar.rotationPointY = f - 10.0f;
		rightBigEar.rotationPointY = f - 10.0f;
		hump.rotationPointY = f - 13.0f;
		body.rotationPointY = f - 2.0f;
		skirt.rotationPointY = f + 8.0f;
		rightTuskA.rotationPointY = f - 10.0f;
		rightTuskB.rotationPointY = f - 10.0f;
		rightTuskC.rotationPointY = f - 10.0f;
		rightTuskD.rotationPointY = f - 10.0f;
		leftTuskA.rotationPointY = f - 10.0f;
		leftTuskB.rotationPointY = f - 10.0f;
		leftTuskC.rotationPointY = f - 10.0f;
		leftTuskD.rotationPointY = f - 10.0f;
		trunkA.rotationPointY = f - 3.0f;
		trunkB.rotationPointY = f + 5.5f;
		trunkC.rotationPointY = f + 13.0f;
		trunkD.rotationPointY = f + 16.0f;
		trunkE.rotationPointY = f + 19.5f;
		frontRightUpperLeg.rotationPointY = f + 4.0f;
		frontRightLowerLeg.rotationPointY = f + 14.0f;
		frontLeftUpperLeg.rotationPointY = f + 4.0f;
		frontLeftLowerLeg.rotationPointY = f + 14.0f;
		backRightUpperLeg.rotationPointY = f + 4.0f;
		backRightLowerLeg.rotationPointY = f + 14.0f;
		backLeftUpperLeg.rotationPointY = f + 4.0f;
		backLeftLowerLeg.rotationPointY = f + 14.0f;
		tailRoot.rotationPointY = f - 8.0f;
		tail.rotationPointY = f - 8.0f;
		tailPlush.rotationPointY = f - 8.0f;
		storageRightBedroll.rotationPointY = f - 10.2f;
		storageLeftBedroll.rotationPointY = f - 10.2f;
		storageFrontRightChest.rotationPointY = f - 1.2f;
		storageBackRightChest.rotationPointY = f - 1.2f;
		storageFrontLeftChest.rotationPointY = f - 1.2f;
		storageBackLeftChest.rotationPointY = f - 1.2f;
		storageRightBlankets.rotationPointY = f - 10.2f;
		storageLeftBlankets.rotationPointY = f - 10.2f;
		harnessBlanket.rotationPointY = f - 13.2f;
		harnessUpperBelt.rotationPointY = f - 2.0f;
		harnessLowerBelt.rotationPointY = f - 2.0f;
		cabinPillow.rotationPointY = f - 16.0f;
		cabinLeftRail.rotationPointY = f - 23.0f;
		cabin.rotationPointY = f - 35.0f;
		cabinRightRail.rotationPointY = f - 23.0f;
		cabinBackRail.rotationPointY = f - 23.0f;
		cabinRoof.rotationPointY = f - 34.0f;
		fortBackRightWall.rotationPointY = f - 16.0f;
		fortBackLeftWall.rotationPointY = f - 16.0f;
		fortBackWall.rotationPointY = f - 16.0f;
		fortNeckBeam.rotationPointY = f - 16.0f;
		fortBackBeam.rotationPointY = f - 16.0f;
		fortFloor1.rotationPointY = f - 16.0f;
		fortFloor2.rotationPointY = f - 16.0f;
		fortFloor3.rotationPointY = f - 16.0f;
		storageUpLeft.rotationPointY = f - 16.0f;
		storageUpRight.rotationPointY = f - 16.0f;
		tuskLD1.rotationPointY = f - 10.0f;
		tuskLD2.rotationPointY = f - 10.0f;
		tuskLD3.rotationPointY = f - 10.0f;
		tuskLD4.rotationPointY = f - 10.0f;
		tuskLD5.rotationPointY = f - 10.0f;
		tuskRD1.rotationPointY = f - 10.0f;
		tuskRD2.rotationPointY = f - 10.0f;
		tuskRD3.rotationPointY = f - 10.0f;
		tuskRD4.rotationPointY = f - 10.0f;
		tuskRD5.rotationPointY = f - 10.0f;
		tuskLI1.rotationPointY = f - 10.0f;
		tuskLI2.rotationPointY = f - 10.0f;
		tuskLI3.rotationPointY = f - 10.0f;
		tuskLI4.rotationPointY = f - 10.0f;
		tuskLI5.rotationPointY = f - 10.0f;
		tuskRI1.rotationPointY = f - 10.0f;
		tuskRI2.rotationPointY = f - 10.0f;
		tuskRI3.rotationPointY = f - 10.0f;
		tuskRI4.rotationPointY = f - 10.0f;
		tuskRI5.rotationPointY = f - 10.0f;
		tuskLW1.rotationPointY = f - 10.0f;
		tuskLW2.rotationPointY = f - 10.0f;
		tuskLW3.rotationPointY = f - 10.0f;
		tuskLW4.rotationPointY = f - 10.0f;
		tuskLW5.rotationPointY = f - 10.0f;
		tuskRW1.rotationPointY = f - 10.0f;
		tuskRW2.rotationPointY = f - 10.0f;
		tuskRW3.rotationPointY = f - 10.0f;
		tuskRW4.rotationPointY = f - 10.0f;
		tuskRW5.rotationPointY = f - 10.0f;
	}

	@Override
	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		setRotationAngles(f, f1, f2, f3);
		leftTuskB.render(f5);
		rightTuskB.render(f5);
		leftTuskC.render(f5);
		rightTuskC.render(f5);
		leftTuskD.render(f5);
		rightTuskD.render(f5);
		leftSmallEar.render(f5);
		rightSmallEar.render(f5);
		headBump.render(f5);
		skirt.render(f5);
		head.render(f5);
		neck.render(f5);
		chin.render(f5);
		lowerLip.render(f5);
		back.render(f5);
		hump.render(f5);
		body.render(f5);
		rightTuskA.render(f5);
		leftTuskA.render(f5);
		trunkA.render(f5);
		trunkB.render(f5);
		trunkC.render(f5);
		trunkD.render(f5);
		trunkE.render(f5);
		frontRightUpperLeg.render(f5);
		frontRightLowerLeg.render(f5);
		frontLeftUpperLeg.render(f5);
		frontLeftLowerLeg.render(f5);
		backRightUpperLeg.render(f5);
		backRightLowerLeg.render(f5);
		backLeftUpperLeg.render(f5);
		backLeftLowerLeg.render(f5);
		tailRoot.render(f5);
		tail.render(f5);
		tailPlush.render(f5);
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	private void setRotationAngles(float f, float f1, float f2, float f3) {
		float f31 = f3;
		float rLegXRot = MathHelper.cos(f * 0.6662f + 3.141593f) * 0.8f * f1;
		float lLegXRot = MathHelper.cos(f * 0.6662f) * 0.8f * f1;
		if (f31 > 20.0f) {
			f31 = 20.0f;
		}
		if (f31 < -20.0f) {
			f31 = -20.0f;
		}
		float headYRot = f31 / 57.29578f;
		float f10 = 0.0f;
		adjustY(f10);
		float trunkXRot = 0.0f;
		float headXRot = 0.0f;
		float radianF = 57.29578f;
		head.rotateAngleX = -10.0f / radianF + headXRot;
		headBump.rotateAngleY = head.rotateAngleY = headYRot;
		headBump.rotateAngleX = head.rotateAngleX;
		rightTuskA.rotateAngleY = headYRot;
		leftTuskA.rotateAngleY = headYRot;
		rightTuskA.rotateAngleX = 70.0f / radianF + headXRot;
		leftTuskA.rotateAngleX = 70.0f / radianF + headXRot;
		chin.rotateAngleY = headYRot;
		chin.rotateAngleX = 113.0f / radianF + headXRot;
		lowerLip.rotateAngleY = headYRot;
		lowerLip.rotateAngleX = 85.0f / radianF + headXRot;
		float earF = 0.0f;
		float f2a = f2 % 100.0f;
		if (f2a > 60.0f && f2a < 90.0f) {
			earF = MathHelper.cos(f2 * 0.5f) * 0.35f;
		}
		rightBigEar.rotateAngleY = 30.0f / radianF + headYRot + earF;
		rightSmallEar.rotateAngleY = 30.0f / radianF + headYRot + earF;
		leftBigEar.rotateAngleY = -30.0f / radianF + headYRot - earF;
		leftSmallEar.rotateAngleY = -30.0f / radianF + headYRot - earF;
		rightBigEar.rotateAngleX = -10.0f / radianF + headXRot;
		rightSmallEar.rotateAngleX = -10.0f / radianF + headXRot;
		leftBigEar.rotateAngleX = -10.0f / radianF + headXRot;
		leftSmallEar.rotateAngleX = -10.0f / radianF + headXRot;
		trunkA.rotationPointZ = -22.5f;
		adjustAllRotationPoints(trunkA, head);
		trunkA.rotateAngleY = headYRot;
		float trunkARotX = 90.0f - trunkXRot;
		trunkA.rotateAngleX = trunkARotX / radianF + headXRot;
		trunkB.rotationPointZ = -22.5f;
		adjustAllRotationPoints(trunkB, trunkA);
		trunkB.rotateAngleY = headYRot;
		trunkB.rotateAngleX = (95.0f - trunkXRot * 1.5f) / radianF + headXRot;
		trunkC.rotationPointZ = -22.5f;
		adjustAllRotationPoints(trunkC, trunkB);
		trunkC.rotateAngleY = headYRot;
		trunkC.rotateAngleX = (110.0f - trunkXRot * 3.0f) / radianF + headXRot;
		trunkD.rotationPointZ = -21.5f;
		adjustAllRotationPoints(trunkD, trunkC);
		trunkD.rotateAngleY = headYRot;
		trunkD.rotateAngleX = (127.0f - trunkXRot * 4.5f) / radianF + headXRot;
		trunkE.rotationPointZ = -19.0f;
		adjustAllRotationPoints(trunkE, trunkD);
		trunkE.rotateAngleY = headYRot;
		trunkE.rotateAngleX = (145.0f - trunkXRot * 6.0f) / radianF + headXRot;
		frontRightUpperLeg.rotateAngleX = rLegXRot;
		frontLeftUpperLeg.rotateAngleX = lLegXRot;
		backLeftUpperLeg.rotateAngleX = rLegXRot;
		backRightUpperLeg.rotateAngleX = lLegXRot;
		adjustXRotationPoints(frontRightLowerLeg, frontRightUpperLeg);
		adjustXRotationPoints(backRightLowerLeg, backRightUpperLeg);
		adjustXRotationPoints(frontLeftLowerLeg, frontLeftUpperLeg);
		adjustXRotationPoints(backLeftLowerLeg, backLeftUpperLeg);
		float lLegXRotD = lLegXRot * 57.29578f;
		float rLegXRotD = rLegXRot * 57.29578f;
		if (lLegXRotD > 0.0f) {
			lLegXRotD *= 2.0f;
		}
		if (rLegXRotD > 0.0f) {
			rLegXRotD *= 2.0f;
		}
		frontLeftLowerLeg.rotateAngleX = lLegXRotD / radianF;
		frontRightLowerLeg.rotateAngleX = rLegXRotD / radianF;
		backLeftLowerLeg.rotateAngleX = rLegXRotD / radianF;
		backRightLowerLeg.rotateAngleX = lLegXRotD / radianF;
		leftTuskB.rotateAngleY = headYRot;
		leftTuskC.rotateAngleY = headYRot;
		leftTuskD.rotateAngleY = headYRot;
		rightTuskB.rotateAngleY = headYRot;
		rightTuskC.rotateAngleY = headYRot;
		rightTuskD.rotateAngleY = headYRot;
		leftTuskB.rotateAngleX = 40.0f / radianF + headXRot;
		leftTuskC.rotateAngleX = 10.0f / radianF + headXRot;
		leftTuskD.rotateAngleX = -20.0f / radianF + headXRot;
		rightTuskB.rotateAngleX = 40.0f / radianF + headXRot;
		rightTuskC.rotateAngleX = 10.0f / radianF + headXRot;
		rightTuskD.rotateAngleX = -20.0f / radianF + headXRot;
		storageLeftBedroll.rotateAngleX = lLegXRot / 10.0f;
		storageFrontLeftChest.rotateAngleX = lLegXRot / 5.0f;
		storageBackLeftChest.rotateAngleX = lLegXRot / 5.0f;
		storageRightBedroll.rotateAngleX = rLegXRot / 10.0f;
		storageFrontRightChest.rotateAngleX = rLegXRot / 5.0f;
		storageBackRightChest.rotateAngleX = rLegXRot / 5.0f;
		fortNeckBeam.rotateAngleZ = lLegXRot / 50.0f;
		fortBackBeam.rotateAngleZ = lLegXRot / 50.0f;
		fortBackRightWall.rotateAngleZ = lLegXRot / 50.0f;
		fortBackLeftWall.rotateAngleZ = lLegXRot / 50.0f;
		fortBackWall.rotateAngleX = 0.0f - lLegXRot / 50.0f;
		float tailMov = f1 * 0.9f;
		if (tailMov < 0.0f) {
			tailMov = 0.0f;
		}
		tailRoot.rotateAngleY = 0.0f;
		tailRoot.rotateAngleX = 17.0f / radianF + tailMov;
		tailPlush.rotateAngleX = tail.rotateAngleX = 6.5f / radianF + tailMov;
		tail.rotateAngleY = tailPlush.rotateAngleY = tailRoot.rotateAngleY;
	}
}